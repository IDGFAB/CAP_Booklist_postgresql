services:
  db:
    image: postgres:16-alpine
    container_name: caplib-db
    environment:
      POSTGRES_DB: caplib
      POSTGRES_USER: cap
      POSTGRES_PASSWORD: cap
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"         # opzionale
    healthcheck:
      # prima collegava implicitamente al DB "cap"; ora puntiamo a caplib
      test: ["CMD", "pg_isready", "-U", "cap", "-d", "caplib"]
      interval: 5s
      timeout: 3s
      retries: 10

  app:
    build: .
    container_name: caplib-app
    depends_on:
      db:
        condition: service_healthy
    environment:
      # ---- DB (sovrascrivono il profilo [pg] del package.json) ----
      CDS_REQUIRES_DB_KIND: postgres
      CDS_REQUIRES_DB_IMPL: "@cap-js/postgres"
      CDS_REQUIRES_DB_CREDENTIALS_HOST: db
      CDS_REQUIRES_DB_CREDENTIALS_PORT: "5432"
      CDS_REQUIRES_DB_CREDENTIALS_DATABASE: caplib
      CDS_REQUIRES_DB_CREDENTIALS_USER: cap
      CDS_REQUIRES_DB_CREDENTIALS_PASSWORD: cap

      # ---- Auth: evita xssec in container dev ----
      # Opzione A (consigliata): fissa esplicitamente "mock"
      CDS_REQUIRES_AUTH_KIND: mocked

      # Opzione B: in alternativa potresti rimuovere NODE_ENV=production
      # (se lo avevi) per far rientrare CAP in modalit√† dev

    ports:
      - "4004:4004"

volumes:
  pgdata: